from __future__ import annotations

import os
import csv
import tempfile
import zipfile
import shutil
from pathlib import Path
from typing import List, Tuple, Dict

from app.adapter import extract_cards_from_ppt

PIPELINE_TAG = "v2.2"


def write_csv(cards: List[Tuple[str, str]], path: str) -> str:
    Path(path).parent.mkdir(parents=True, exist_ok=True)
    with open(path, "w", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        w.writerow(["question", "answer"])
        for q, a in cards:
            w.writerow([q, a])
    return os.path.abspath(path)


def write_apkg(cards: List[Tuple[str, str]], path: str) -> str:
    try:
        import genanki
    except Exception as e:
        # If genanki unavailable, create an empty placeholder to keep the ZIP structure
        Path(path).parent.mkdir(parents=True, exist_ok=True)
        with open(path, "wb") as f:
            f.write(b"")
        return os.path.abspath(path)

    Path(path).parent.mkdir(parents=True, exist_ok=True)

    # Occlusion-only mode: if environment flag set, emit an empty IOE deck to avoid Basic model creation
    if os.getenv("OJAMED_OCCLUSION_ONLY", "0") == "1":
        try:
            from anki_models import IOE_MODEL
        except Exception:
            # Fallback: create a minimal IOE-like model to ensure Anki imports as image-occlusion type
            IOE_MODEL = genanki.Model(
                1876543210,
                "Image Occlusion Enhanced+",
                fields=[{"name": "Question Mask"}, {"name": "Original Mask"}],
                templates=[{"name": "IO Card", "qfmt": "{{Question Mask}}", "afmt": "{{Original Mask}}"}],
            )
        deck = genanki.Deck(2059400101, "OjaMed Deck (Occlusion)")
        # No basic notes added here ‚Äì occlusion images will be added later by the main generator path
        # Keep deck valid by adding a harmless empty IOE note if Anki requires at least one
        if not cards:
            try:
                deck.add_note(genanki.Note(model=IOE_MODEL, fields=["", ""]))
            except Exception:
                pass
        genanki.Package(deck).write_to_file(path)
        return os.path.abspath(path)

    # Default basic deck for text pairs
    model = genanki.Model(
        1607392319,
        "Basic (OjaMed)",
        fields=[{"name": "Question"}, {"name": "Answer"}],
        templates=[
            {
                "name": "Card 1",
                "qfmt": "{{Question}}",
                "afmt": "{{FrontSide}}<hr id=answer>{{Answer}}",
            }
        ],
    )

    deck = genanki.Deck(2059400101, "OjaMed Deck")
    for q, a in cards:
        note = genanki.Note(model=model, fields=[q, a])
        deck.add_note(note)

    genanki.Package(deck).write_to_file(path)
    return os.path.abspath(path)


def run_pipeline(input_path: str) -> Dict[str, str]:
    """
    Run the complete pipeline: extract cards, write CSV and APKG.
    
    Returns dictionary with paths to all generated files for ZIP creation.
    """
    # Extract cards from the input file
    cards = extract_cards_from_ppt(input_path) or []
    print(f"[OjaMed][PIPELINE] Extracted {len(cards)} cards from {input_path}")
    if not cards:
        cards = [("Example?", "Yes")]  # ensure importable deck

    # Create unique temp dir and fixed filenames so ZIP contains deck.csv + deck.apkg
    out_dir = Path(tempfile.mkdtemp(prefix="ojamed_"))
    csv_path = str(out_dir / "deck.csv")
    apkg_path = str(out_dir / "deck.apkg")

    csv_abs = write_csv(cards, csv_path)

    try:
        apkg_abs = write_apkg(cards, apkg_path)
    except Exception:
        # Keep CSV and write an empty APKG placeholder
        with open(apkg_path, "wb") as f:
            f.write(b"")
        apkg_abs = os.path.abspath(apkg_path)

    # Check if comprehensive notes PDF was generated by the adapter
    comprehensive_notes_pdf = os.environ.get("OJAMED_COMPREHENSIVE_NOTES_PDF")
    pdf_abs = None
    
    if comprehensive_notes_pdf and os.path.exists(comprehensive_notes_pdf):
        print(f"[OjaMed][PIPELINE] üìÑ Comprehensive notes PDF found: {comprehensive_notes_pdf}")
        
        # Copy PDF to temp directory with descriptive name
        pdf_filename = os.path.basename(comprehensive_notes_pdf)
        temp_pdf_path = str(out_dir / pdf_filename)
        
        try:
            shutil.copy2(comprehensive_notes_pdf, temp_pdf_path)
            pdf_abs = os.path.abspath(temp_pdf_path)
            print(f"[OjaMed][PIPELINE] PDF copied to temp directory: {pdf_abs}")
        except Exception as e:
            print(f"[OjaMed][PIPELINE] ‚ö†Ô∏è Error copying PDF: {e}")
            pdf_abs = None
    else:
        print("[OjaMed][PIPELINE] No comprehensive notes PDF generated")

    return {
        'apkg_path': apkg_abs,
        'csv_path': csv_abs,
        'comprehensive_notes_pdf': pdf_abs,
        'temp_dir': str(out_dir)
    }
